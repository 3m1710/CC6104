)
lappy(vectores,length)
lapply(vectores,length)
sapply(vectores,length)
sapply(vectores,mean)
sapply(vectores,sd)
myapply<-function(lista,fun,...){
resultado<-vector(length=length(lista))
for(i in 1:length(lista)){
resultado[i]<-fun(lista[[i]],...)
}
resultado
}
myapply(vectores,mean)
sapply()
sapply
lapply
.Internal()
.Internal(lapply)
.Internal
?.Internal
# Los data.frame soportan vectores de distinto tipo pero de distinos elementos
edades.frame<-data.frame(edad=edades,categoria=categ_edades)
names(edades.frame)
edades.frame[3,1] # La edad del tercer elemento
edades.frame$edad[1:6] # La edad de los primeros 6 elementos
attach(edades.frame)
edad[1:3]
#Guardando
write.table(x=edades.frame,file="edades.csv",sep=",",row.names=F)
wd
wd()
gwd()
getwd()
iris<-read.table(file="iris.csv",header=T,sep="\t")
iris$Sepal.Length
attach(iris)
data()
data(package = .packages(all.available = TRUE))
data(USArrests)
data("iris")
force(iris)
View(milista)
View(iris)
?sample
edades
sample(edades,size=4)
sample(edades.frame,size=4)
edades.frame
dim(USAccDeaths)
data(USArrests)
USArrests[sample(1:(dim(USArrests)[1]),size=3,replace=F),]
USArrests[sample(1:(dim(USArrests)[1]),size=3,replace=F),]
USArrests[sample(1:(dim(USArrests)[1]),size=3,replace=F),]
USArrests[sample(1:(dim(USArrests)[1]),size=3,replace=F),]
USArrests[sample(1:(dim(USArrests)[1]),size=3,replace=F),]
4*5
install.packages("ggplot2")
install.packages(c("scatterplot3d", "aplpack"))
data(iris)
#Para ver las promediedades estadisticas básicas hacemos summary
summary(iris)
#Para ver los atributos del data.frame
names(iris)
dim(iris)
#Para pasar todas las variables del data.frame al ambiente
attach(iris)
#frecuencias
table(iris$Species)
vec<-c(1,1,1,0,0,3,3,3,3,2)
table(vec)
table(vec)/length(vec)  # Frecuencia porcentual
# La moda
my_mode<-function(var){
frec.var<-table(var)
valor<-which(frec.var==max(frec.var))  # Elementos con el valor máximo
names(valor)
}
my_mode(vec)
my_mode(iris$Sepal.Length)
#Estadisticos básicos
mean(Sepal.Length)
median(Sepal.Length)
#media truncada define el porcentaje de elementos extremos que no considera
mean(Sepal.Length, trim=0.1)
# Creamos un vector de tamaño 10, con media 20 y sd 10
vec<-rnorm(10,20,10)
mean(vec)
vec.ruid<-c(vec,rnorm(1,300,100))
mean(vec.ruid)
mean(vec,trim=0.1)
mean(vec.ruid,trim=0.1)
median(vec)
median(vec.ruid)
# Todos los percentiles
quantile(Sepal.Length,seq(0,1,0.01))
quantile(Sepal.Length,seq(0,1,0.25))
tapply(iris$Petal.Length,iris$Species,summary)
tapply(iris$Petal.Width,iris$Species,summary)
tapply(iris$Sepal.Length,iris$Species,summary)
tapply(iris$Sepal.Width,iris$Species,summary)
summary(iris)
#frecuencia
table(iris$Species)
# Dispercion
range(Sepal.Length)
max(Sepal.Length)-min(Sepal.Length)
sd(Sepal.Length)
sepal.var<-var(Sepal.Length)
#Es equivalente a computarlo como
myvar<-sum((Sepal.Length-mean(Sepal.Length))^2)/(length(Sepal.Length-1))
var(Sepal.Length)
sd(Sepal.Length)
aad<-function(x,fun=median){
mean(abs(x-fun(x)))
}
aad(Sepal.Length)
aad(Sepal.Length,mean)
mad(Sepal.Length)
median(abs(Sepal.Length-median(Sepal.Length)))
mad(Sepal.Length,constant=1)
mad(Sepal.Length,center=mean(Sepal.Length),1)
IQR(Sepal.Length)
?quantile
?IQR
###
cov(Sepal.Length,Sepal.Width)
cov(iris[,1:4])
cor(iris[,1:4])
# Tablas de Contingencia
sexo<-c("Hombre","Hombre","Mujer","Hombre","Mujer","Mujer")
estudios<-c("universitario","secundario","secundario",
"postgrado","secundario","universitario")
table(sexo,estudios)
weather<-read.table("weather.nominal.csv",header=T,sep=",")
table(weather$outlook,weather$play)
table(weather$temperature,weather$play)
library(modeest)
#Visualización
png("imagen.png")
plot(1:10)
dev.off()
plot(rnorm(15,10,5),col="red",type="p",pch=1)
lines(rnorm(15,10,5),col="blue",type="p",pch=1)
lines(rnorm(15,10,5),col="green",type="b",pch=2)
title(main="Mi gráfico")
legend('topright', c("lineas","puntos","ambos") ,
lty=1:3, col=c("red", "blue","green"), bty='n', cex=.75)
## Histogramas
hist(Sepal.Length)
lines(density(Sepal.Length))
hist(Sepal.Length,nclass=length(Sepal.Length))
## con ggplot2
library(ggplot2)
# Basic histogram
ggplot(iris, aes(x=Sepal.Length)) + geom_histogram(bins = 10, color="black", fill="white")
plot(density(iris$Sepal.Length),main="Densidad de Sepal.Length")
plot(density(iris$Sepal.Length),col="red",main="Densidad")
pie(table(iris$Species))
boxplot(Sepal.Length,main="Boxplot Sepal.Length")
boxplot(Sepal.Length~Species,ylab="Sepal.Length")
boxplot(x=iris[,1:4],main="Boxplots Iris")
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot()
plot(Sepal.Width~Sepal.Length, col=Species)
plot(Sepal.Length, Sepal.Width,col=Species,
pch=as.numeric(Species))
legend('topright', levels(Species) ,
lty=1, col=1:3, bty='n', cex=.75)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point(size=3,shape=4)
plot(iris)
pairs(iris)
pairs(iris[,1:4],pch=as.numeric(iris$Species),col=iris$Species)
plot(iris$Sepal.Length,col=as.numeric(iris$Species))
plot(Sepal.Length, Sepal.Width, col=Species, pch=as.numeric(Species))
legend('topright', levels(Species) ,
lty=1, col=c('red', 'blue', 'green'), bty='n', cex=.75)
ggpairs(iris[,1:4])
dev.off()
library(scatterplot3d)
scatterplot3d(iris$Petal.Width, iris$Sepal.Length, iris$Sepal.Width, color=as.numeric(iris$Species))
library(MASS)
parcoord(iris[1:4], col=iris$Species,var.label=T)
iris_sample1<-iris[sample(1:dim(iris)[1],size=6,replace=F),]
rownames(iris_sample1)<-paste(as.character(iris_sample1$Species),1:6)
stars(iris_sample1[1:4])
library("aplpack")
iris_sample<-iris[sample(1:dim(iris)[1],size=16,replace=F),]
faces(iris_sample[1:4],face.type=1,labels=iris_sample$Species)
library(gplots)
library(ggplot2)
qplot(Sepal.Length,data=iris,geom ="histogram",binwidth=0.1)
qplot(Sepal.Length,data=iris,geom ="density")
4*5
2^3
exp(-5)
log(4)
2+3
exp(3.3)
rm(list=ls())
a<-1
a
b+3
b=3
assign("tres",3)
tres
a+b
d<-a+b
ver<-T
pal<-"hola"
class(a)
class(pal)
class(ver)
# Declarando funciones
suma<-function(a=2,b=1){
a+b;
}
suma(3,4)
suma()
suma(3)
suma(b=3)
suma(a=3)
suma(a=3,b="perro")
suma(a=3,b=T)
suma<-function(a=2,b=1){
return(a+b);
}
suma(1,2)
class(suma)
help(ls)
?ls
#Para un comando
help("for")
?function
+
?ls
ls()
rm(a)
a
rm(list=ls())
# Introducción a R
# Felipe Bravo-Marquez
# R puede ser usado como una calculadora
4*5
2^3
exp(-5)
log(4)
# Declarando variables
a<-1
b=3
assign("tres",3)
d<-a+b
ver<-T # equivalente a TRUE
pal<-"hola"
normales<-rnorm(n=100)
# Declarando funciones
suma<-function(a=2,b=1){
return(a+b);
}
suma(3,4)
suma()
class(suma)
#Recursividad
fac<-function(n){
ifelse(n==1,return(1),return(n*fac(n-1)))
}
#tipos
class(a)
class(ver)
class(pal)
class(suma)
save.image("~/la.RData")
rm(list=ls())
load("~/la.RData")
c(1,3,4)
edades<-c(21,33,12,34,23,70,90,80,7,29,14,2,
88,11,55,24,13,11,56,28,33)
class(edades)
suma<-sum(edades)
?sum
suma<-sum(edades)
largo<-length(edades)
numeros<-c(1,2,3)
numeros+3
numeros*5
numeros^2
vec1<-c(1,2,3)
vec2<-(-1,-2,-3,0)
vec2<-c(-1,-2,-3,0)
vec1+vec2
vec2<-c(-1,-2,-3,0,0,0)
vec1+vec2
media<-sum(edades)/length(edades)
mean(edades)
media
mi_varianza <- function(vector){
sum((vector-mean(vector))^2)/(length(vector)-1)
}
mi_varianza(edades)
var(edades)
mi_varianza <- function(vector,mean_function=mean){
sum((vector-mean_function(vector))^2)/(length(vector)-1)
}
mi_varianza(edades)
mi_varianza(edades,mediana)
mi_varianza(edades,median)
# Reciclaje
# si son del mismo largo es uno a uno
a<-c(1,2)
b<-c(3,4)
a+b
a*b
#Si hay uno de largo 1 se aplica a todos
unidad<-1
a+unidad
# Si uno es más largo que otro se recicla
d<-c(4,5,6,9)
a+d
#ojo que el largo del menor debe ser múltiple del largo del mayor
#c(1,2)+c(-9,2,3) # no funciona
#Los elementos de un vector pueden tener nombres
notas<-c(Juan=4.5,Luis=6.2,Romina=3.9,Felipe=2.8,Mariana=6.7)
names(notas)
# El ranking de los alumnos
names(sort(x=notas,decreasing=T))
#acceso a elementos
notas[1] #primer elemento
notas[-2] # Todos menos el segundo
notas[c(1,5)] # primer y quinto elemento
notas[c("Juan","Mariana")] # Sólo Juan y Mariana
# Si concateno vectores de disinto tipo R los pasa al mismo
c("hola",2,T)
c(TRUE,FALSE,500)
#Ojo con los missing values (cuando leamos datos de archivos)
missing_vector<-c(12,15,NA)
missing_vector
missing_vector[!is.na(missing_vector)]
# Secuencias
pares<-seq(from=2,to=20,by=2)
# se simplifica como
unoadiez<-1:10
# 100 multiplos de 4
cuatro_mult<-seq(from=4,by=4,length=100)
#Repeticiones
#repetir 10 15 veces
rep(10,3)
rep(c("hola","chao"),4)
# Vectores Aleatorios
normales<-rnorm(n=5, mean = 10, sd = 4)
uniformes<-runif(n=10, min = 1, max = 10)
poisson<-rpois(n=10, lambda = 3)
binom<-rbinom(n=10,size=2,prob=0.5)
# Gente menor de edad, creo un vector logico
# R soporta los operadores logicos >,<, ==, <=, >=, != además de & | para and y or
menores<-edades<18
menores
edades[menores]
#promedio de edad de los mayores
mean(edades[edades>=18])
c(1,2,3,4,5,6,7,8,9,10)
1:10
vec<-1:100
vec
vec[1:15]
vec[vec>10]
vec[vec>10][1:15]
#promedio de edad de los mayores
mean(edades[edades>=18])
# Variables factor
factor(c("Hombre","Mujer","Mujer","Mujer","Hombre"))
gente<-factor(c("Hombre","Mujer","Mujer","Mujer","Hombre"))
gente
class(gente)
levels(gente)
levels(gente)<-c("Man","Woman")
gente
#Si queremos trabajar con variables categóricas R tiene un tipo llamado factor
#menores y mayores de edad
categ_edades<-ifelse(edades<12,"niño",
ifelse(edades<18,"adolescente","adulto"))
class(categ_edades)
#Convierto a factor con as.factor
categ_edades<-as.factor(categ_edades)
levels(categ_edades)
#Quiero saber el tamaña, media y la desviación de cada categoria
#tapply recibe un vector además de otro con algún factor y una función
#aplica la función a cada subconjunto
tapply(edades,categ_edades,length)
tapply(edades,categ_edades,mean)
tapply(edades,categ_edades,sd)
#Carácteres
saludo<-"Hola Mundo"
cat(saludo)
letters
paste("Hola","Chao",sep="-")
paste("persona",1:4, sep="")
paste(saludo,1:3, sep=" ")
substr(saludo,1,4)
#Matrices y arreglos
#se llenan por defecto por columna
matriz_por_col<-matrix(data=1:12,nrow=3,ncol=4)
matriz_por_fil<-matrix(data=1:12,nrow=4,ncol=3,byrow=T)
dim(matriz_por_fil)
#Accediendo a los elementos
matriz_por_fil[2,] #Segunda fila, todas las columnas
matriz_por_fil[2,1] # Segunda fila, primera columna
matriz_por_fil[-1,-2] # Todo menos la primera fila y la segunda columna
#Para asignarle nombres a las filas
rownames(matriz_por_fil)<-paste("r",1:4,sep="")
colnames(matriz_por_fil)<-paste("c",1:3,sep="")
matriz_por_fil["r2","c3"]
# concatenado
rbind(matriz_por_fil,r5=1:3)
cbind(matriz_por_fil,c4=4:1)
#Multiplicacion de matrices
a<-matriz_por_col %*% matriz_por_fil
t(a)
eigen(a)
#Arreglos son matrices de más dimensiones (también conocidos como tensores)
arreglo<-array(1:8, dim=c(2,2,2))
arreglo[1,2,1]
#Listas y Data Frames
milista<-list(hombre="Pepe",mujer="Juana",
hijos=3,edades=c(4,8,12))
milista[c(3,4)] # Sublista
milista[[1]]
milista[["hombre"]]
milista$hombre
vectores<-list(normal=rnorm(n=100,mean=10,sd=5),
poisson=rpois(n=100,lambda=10),
uniforme=runif(n=100,min=5,max=15))
# Como saco la media se cada grupo
#forma mala
medias<-vector()
desv<-vector()
for(i in 1:length(vectores)){
medias[i]<-mean(vectores[[i]])
desv[i]<-sd(vectores[[i]])
}
medias
desv
# Forma inteligente
lapply(vectores,mean)
lapply(vectores,sd)
sapply(vectores,mean)
sapply(vectores,sd)
# En R puedo pasar funciones como parámetros y podría hacer mi propio lapply
myapply<-function(lista,fun,...){
resultado<-vector(length=length(lista))
for(i in 1:length(lista)){
resultado[i]<-fun(lista[[i]],...)
}
resultado
}
# Los data.frame soportan vectores de distinto tipo pero de distinos elementos
edades.frame<-data.frame(edad=edades,categoria=categ_edades)
names(edades.frame)
edades.frame[3,1] # La edad del tercer elemento
edades.frame$edad[1:6] # La edad de los primeros 6 elementos
attach(edades.frame)
edad[1:3]
#Guardando
write.table(x=edades.frame,file="edades.csv",sep=",",row.names=F)
edades
categ_edades
length(edades)
length(categ_edades)
edades.frame<-data.frame(edad=edades,categoria=categ_edades)
View(edades.frame)
edades.frame$edad
edades.frame$categoria
edades.frame[1:3,1]
edades.frame[1:3,\]
edades.frame[1:3,]
edades.frame$categoria=="adulto"
edades.frame[edades.frame$categoria=="adulto",]
edades.frame[edades.frame$categoria=="adulto",1]
mean(edades.frame[edades.frame$categoria=="adulto",1])
rm(list = ls())
data(iris)
data(iris)
iris
View(iris)
names(iris)
mean(iris$Sepal.Length)
var(iris$Petal.Length)
dim(iris)
#Para pasar todas las variables del data.frame al ambiente
attach(iris)
#frecuencias
table(iris$Species)
vec<-c(1,1,1,0,0,3,3,3,3,2)
table(vec)
table(vec)/length(vec)  # Frecuencia porcentual
# La moda
my_mode<-function(var){
frec.var<-table(var)
valor<-which(frec.var==max(frec.var))  # Elementos con el valor máximo
names(valor)
}
my_mode(vec)
my_mode(iris$Sepal.Length)
#Estadisticos básicos
mean(Sepal.Length)
median(Sepal.Length)
#media truncada define el porcentaje de elementos extremos que no considera
mean(Sepal.Length, trim=0.1)
# Creamos un vector de tamaño 10, con media 20 y sd 10
vec<-rnorm(10,20,10)
mean(vec)
vec.ruid<-c(vec,rnorm(1,300,100))
mean(vec.ruid)
